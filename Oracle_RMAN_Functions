#
Author="Andre Augusto Ribas"
SoftwareVersion="1.0.3"
DateCreation="18/08/2021"
DateModification="03/03/2022"
EMAIL_1="dba.ribas@gmail.com"
EMAIL_2="andre.ribas@icloud.com"
WEBSITE="http://dbnitro.net"
#
function SepLine() {
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -  
}
#
function SetClear() {
printf "\033c"
}
#
function RMAN_HELP() {
SetClear
SepLine
echo -e "\
|#[ RMAN_001 ] RMAN: VERIFY DATABASE VERSION                            |#|[ RMAN_002 ] RMAN: VERIFY INSTALLED PATCHES - DETAILS      |#|
|#[ RMAN_003 ] RMAN: VERIFY DATABASE VERSION                            |#|[ RMAN_004 ] RMAN: VERIFY INSTALLED PATCHES - DETAILS      |#|
|#[ RMAN_005 ] RMAN: VERIFY DATABASE VERSION                            |#|[ RMAN_005 ] RMAN: VERIFY INSTALLED PATCHES - DETAILS      |#|
|#[ RMAN_007 ] RMAN: VERIFY DATABASE VERSION                            |#|[ RMAN_006 ] RMAN: VERIFY INSTALLED PATCHES - DETAILS      |#|
|#[ RMAN_009 ] RMAN: VERIFY DATABASE VERSION                            |#|[ RMAN_010 ] RMAN: VERIFY INSTALLED PATCHES - DETAILS      |#|
|#[ RMAN_011 ] RMAN: VERIFY DATABASE VERSION                            |#|[ RMAN_012 ] RMAN: VERIFY INSTALLED PATCHES - DETAILS      |#|
|#[ RMAN_013 ] RMAN: VERIFY DATABASE VERSION                            |#|[ RMAN_014 ] RMAN: VERIFY INSTALLED PATCHES - DETAILS      |#|
|#[ RMAN_015 ] RMAN: VERIFY DATABASE VERSION                            |#|[ RMAN_016 ] RMAN: VERIFY INSTALLED PATCHES - DETAILS      |#|
|#[ RMAN_017 ] RMAN: VERIFY DATABASE VERSION                            |#|[ RMAN_018 ] RMAN: VERIFY INSTALLED PATCHES - DETAILS      |#|
|#[ RMAN_019 ] RMAN: OH MY GOD                                          |#|[ RMAN_020 ] RMAN: VERIFY INSTALLED PATCHES - DETAILS      |#|"
SepLine
}
#
#########################################################################################################
#
# RMAN Funtions
#
#########################################################################################################
# 
#########################################################################################################
#












function RMAN_001() {
sqlplus -S / as sysdba <<EOF
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on long 9999999 numwidth 20 heading on echo on verify on feedback on colsep '|'
col start_time  for a20
col end_time  for a20
col time for a8
select j.session_recid
  , j.session_stamp
  , to_char(j.start_time, 'yyyy-mm-dd hh24:mi:ss') start_time
  , to_char(j.end_time, 'yyyy-mm-dd hh24:mi:ss') end_time
    , decode(to_char(j.start_time, 'd'), 1, 'Sunday', 2, 'Monday', 3, 'Tuesday', 4, 'Wednesday', 5, 'Thursday', 6, 'Friday', 7, 'Saturday') as WHEN
  , (j.output_bytes/1024/1024) output_mbytes
  , j.status
  , j.input_type
--  , j.elapsed_seconds as time
  , j.time_taken_display as time
  , x.cf
  , x.df
  , x.i0
  , x.i1
  , x.l
--  , ro.inst_id output_instance
from V\$RMAN_BACKUP_JOB_DETAILS j
left outer join (select d.session_recid
                   , d.session_stamp
                   , sum(case when d.controlfile_included = 'YES' then d.pieces else 0 end) CF
                   , sum(case when d.controlfile_included = 'NO' and d.backup_type || d.incremental_level = 'D' then d.pieces else 0 end) DF
                   , sum(case when d.backup_type || d.incremental_level = 'D0' then d.pieces else 0 end) I0
                   , sum(case when d.backup_type || d.incremental_level = 'I1' then d.pieces else 0 end) I1
                   , sum(case when d.backup_type = 'L' then d.pieces else 0 end) L
                 from V\$BACKUP_SET_DETAILS d
                 join V\$BACKUP_SET s on s.set_stamp = d.set_stamp 
                 and s.set_count = d.set_count
                 where s.input_file_scan_only = 'NO'
                 group by d.session_recid, d.session_stamp) x
on x.session_recid = j.session_recid 
and x.session_stamp = j.session_stamp
left outer join (select o.session_recid
                   , o.session_stamp
                   , min(inst_id) inst_id
                 from GV\$RMAN_OUTPUT o
                 group by o.session_recid, o.session_stamp)
ro on ro.session_recid = j.session_recid 
and ro.session_stamp = j.session_stamp
order by j.start_time desc;
quit;
EOF
}




function RMAN_002() {
sqlplus -S / as sysdba <<EOF
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on long 9999999 numwidth 20 heading on echo on verify on feedback on colsep '|'
col start_time         heading 'Started'      format a20
col backup_type        heading 'Backup Type'  format a12
col time_taken_display heading 'Elapsed|Time' format a10
col elapsed_min        heading 'Run|Min'      format 999
col output_mbytes      heading 'Size MB'      format 9,999,999
col backup_status      heading 'Status'       format a10 trunc
col cf                 heading 'Ctrl|Files'   format 9,999
col dfiles             heading 'Data|Files'   format 9,999
col l                  heading 'Arch|Files'   format 9,999
col output_instance    heading 'Ran on|Inst'  format 9
select to_char(j.start_time, 'dd-mm-yyyy hh24:mi:ss') start_time
  , decode(j.input_type,'DB INCR',decode(i0,0,'Incr Lvl 1','Incr Lvl 0'),initcap(j.input_type)) backup_type
  , j.time_taken_display
  , j.elapsed_seconds/60 elapsed_min
  , (j.output_bytes/1024/1024) output_mbytes
  , initcap(j.status) backup_status
  , x.cf
  , x.i0 + x.i1 dfiles
  , x.l
  , ro.inst_id output_instance
from V\$RMAN_BACKUP_JOB_DETAILS j
left outer join (select
                     d.session_recid, d.session_stamp,
                     sum(case when d.controlfile_included = 'YES' then d.pieces else 0 end) CF,
                     sum(case when d.controlfile_included = 'NO'
                               and d.backup_type||d.incremental_level = 'D' then d.pieces else 0 end) DF,
                     sum(case when d.backup_type||d.incremental_level = 'D0' then d.pieces else 0 end) I0,
                     sum(case when d.backup_type||d.incremental_level = 'I1' then d.pieces else 0 end) I1,
                     sum(case when d.backup_type = 'L' then d.pieces else 0 end) L
                   from V\$BACKUP_SET_DETAILS d
                   join V\$BACKUP_SET s on s.set_stamp = d.set_stamp and s.set_count = d.set_count
                   where s.input_file_scan_only = 'NO'
                   group by d.session_recid, d.session_stamp) x
    on x.session_recid = j.session_recid and x.session_stamp = j.session_stamp
  left outer join (select o.session_recid, o.session_stamp, min(inst_id) inst_id
                   from GV\$RMAN_OUTPUT o
                   group by o.session_recid, o.session_stamp)
    ro on ro.session_recid = j.session_recid and ro.session_stamp = j.session_stamp
where j.start_time > trunc(next_day(sysdate-6,'SUNDAY'))
order by j.start_time;
quit;
EOF
}




function RMAN_003() {
sqlplus -S / as sysdba <<EOF
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on long 9999999 numwidth 20 heading on echo on verify on feedback on colsep '|'
SELECT r.command_id as backup_name
  , TO_CHAR(r.start_time, 'Dy mm/dd/yyyy HH24:MI:SS') as start_time
  , TO_CHAR(r.end_time, 'Dy mm/dd/yyyy HH24:MI:SS') as end_time
  , r.time_taken_display as elapsed_time
  , DECODE(r.status, 'COMPLETED', r.status, 'RUNNING', r.status, 'FAILED', r.status, r.status) as status
  , r.input_type as input_type
  , r.output_device_type as output_device_type
  , r.input_bytes_display as input_size
  , r.output_bytes_display as output_size
  , r.output_bytes_per_sec_display as output_rate_per_sec
FROM (select command_id
        , start_time
        , end_time
        , time_taken_display
        , status
        , decode(j.input_type,'DB INCR',decode(i0,0,'INCREMENTAL BACKUP','FULL BACKUP'),initcap(j.input_type)) input_type
        , output_device_type
        , input_bytes_display
        , output_bytes_display
        , output_bytes_per_sec_display
      from v\$rman_backup_job_details j
      left outer join (select d.session_recid, d.session_stamp
                         , sum(case when d.controlfile_included = 'YES' then d.pieces else 0 end) CF
                         , sum(case when d.controlfile_included = 'NO' and d.backup_type||d.incremental_level = 'D' then d.pieces else 0 end) DF
                         , sum(case when d.backup_type||d.incremental_level = 'D0' then d.pieces else 0 end) I0
                         , sum(case when d.backup_type||d.incremental_level = 'I1' then d.pieces else 0 end) I1
                         , sum(case when d.backup_type = 'L' then d.pieces else 0 end) L
                       from V\$BACKUP_SET_DETAILS d
                       join V\$BACKUP_SET s on s.set_stamp = d.set_stamp and s.set_count = d.set_count
                       where s.input_file_scan_only = 'NO'
                       group by d.session_recid, d.session_stamp) x
on x.session_recid = j.session_recid 
and x.session_stamp = j.session_stamp
left outer join (select o.session_recid
                   , o.session_stamp
                   , min(inst_id) inst_id 
                 from GV\$RMAN_OUTPUT o 
                 group by o.session_recid, o.session_stamp) ro 
on ro.session_recid = j.session_recid and ro.session_stamp = j.session_stamp
where j.start_time > trunc(next_day(sysdate - 30,'SUNDAY'))
order by start_time DESC) r;
quit;
EOF
}





function RMAN_004() {
sqlplus -S / as sysdba <<EOF
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on long 9999999 numwidth 20 heading on echo on verify on feedback on colsep '|'
COL INST FORMAT 99
COL ITEM FORMAT A25
COL UNITS FORMAT A20
COL COMMENTS FORMAT A40 TRUNC
COL START_TIME FORMAT A20
COL TYPE FORMAT A16
COL UNITS FORMAT A10
col TIMESTAMP format a20
SELECT INST_ID AS INST
  , TO_CHAR(START_TIME, 'DD/MM/YYYY HH24:MI:SS') AS START_TIME
  , TYPE
  , ITEM
  , UNITS
  , SOFAR
  , TO_CHAR(TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS') as TIMESTAMP
  , COMMENTS
FROM GV$RECOVERY_PROGRESS
order by 1,2,3;
quit;
EOF
}





#
#########################################################################################################
# RMAN: OH MY GOD
#########################################################################################################
#

function RMAN_019() {
### Declarando variaveis
PATH_PID=/proc/$(ps aux | grep ora_dbw | head -n 1 | awk '{print $2}')/fd
PATH_PID_REDO=/proc/$(ps aux | grep ora_lgwr | head -n 1 | awk '{print $2}')/fd
TAGFILE=*.dbf\|*.ctl
TAGFILE_REDO=*.log
NC='\033[0m'
YELLOW='\033[1;33m'
echo
echo -e "${YELLOW}Datafiles can be restored${NC}"
echo
### Pegando datafiles que podem ser recuperados
for LISTA in $(ls -l "${PATH_PID}" | grep -E "${TAGFILE}" | grep "(deleted)" | sed "s, ,#,g")
do
  PID=$(echo ${LISTA} | sed "s,#, ,g" | awk '{print $9}')
  FILE=$(echo ${LISTA} | sed "s,#, ,g" | awk '{print $11}')
  echo "cat ${PATH_PID}/${PID} > ${FILE}"
done
SepLine
echo -e "${YELLOW}Redologs can be restored${NC}"
SepLine
### Pegando redologs que podem ser recuperados
for LISTA in $(ls -l "${PATH_PID_REDO}" | grep -E "${TAGFILE_REDO}" | grep "(deleted)" | sed "s, ,#,g")
do
  PID=$(echo ${LISTA} | sed "s,#, ,g" | awk '{print $9}')
  FILE=$(echo ${LISTA} | sed "s,#, ,g" | awk '{print $11}')
  echo "cat ${PATH_PID_REDO}/${PID} > ${FILE}"
done
echo
}
#
#########################################################################################################
# Finish of the System
#########################################################################################################